[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\ESP32_Projects\ESP32-CAM-Live-Streaming\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.12_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/ESP32_Projects/ESP32-CAM-Live-Streaming/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/hello_world_main.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Building C object CMakeFiles/hello_world.elf.dir/project_elf_src_esp32.c.obj
[6/8] Linking CXX executable hello_world.elf
[7/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/ESP32_Projects/ESP32-CAM-Live-Streaming/build/hello_world.bin
[8/8] cmd.exe /C "cd /D D:\ESP32_Projects\ESP32-CAM-Live-Streaming\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.12_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/ESP32_Projects/ESP32-CAM-Live-Streaming/build/partition_table/partition-table.bin D:/ESP32_Projects/ESP32-CAM-Live-Streaming/build/hello_world.bin"
hello_world.bin binary size 0xe19d0 bytes. Smallest app partition is 0x100000 bytes. 0x1e630 bytes (12%) free.
